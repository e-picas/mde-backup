;
; $mde_config = array(
; ...
; );
;

; Change to ">" for HTML output
empty_element_suffix     = " />"

; Define the width of a tab (4 spaces by default)
tab_width                = 4

; Table of hash values for escaped characters:
escape_chars             = "\`*_{}[]()>#+-.!:|"

; Regex to match balanced [brackets].
; Needed to insert a maximum bracked depth while converting to PHP.
nested_brackets_depth   = 6

; Regex to match balanced (parenthesis).
; Needed to insert a maximum bracked depth while converting to PHP.
nested_url_parenthesis_depth  = 4

; Change to `true` to disallow markup or entities.
no_markup             = false
no_entities           = false

; Optional title attribute for footnote links and backlinks.
fn_link_title          = "See footnote %%"
fn_backlink_title      = "Return to content"

; Optional class attribute for footnote links and backlinks.
fn_link_class          = "footnote"
fn_backlink_class      = "reverse_footnote"

; Optional id attribute prefix for footnote links and backlinks.
fn_id_prefix           = ""

; Optional title attribute for glossary footnote links and backlinks.
fng_link_title          = "See glossary entry %%"
fng_backlink_title      = "Return to content"

; Optional class attribute for glossary footnote links and backlinks.
fng_link_class          = "footnote_glossary"
fng_backlink_class      = "reverse_footnote_glossary"

; Optional id attribute prefix for glossary footnote links and backlinks.
fng_id_prefix           = ""

; Optional title attribute for citation footnote links and backlinks.
fnc_link_title          = "See bibliography reference %%"
fnc_backlink_title      = "Return to content"

; Optional class attribute for citation footnote links and backlinks.
fnc_link_class          = "footnote_bibliography"
fnc_backlink_class      = "reverse_footnote_bibliography"

; Optional id attribute prefix for citation footnote links and backlinks.
fnc_id_prefix           = ""


; leave it first!
[gamut_aliases]
filter=Markdown_Filter
tool=Markdown_Tool

[initial_gamut]
tool:Detab:init         = 5
filter:Emphasis:prepare = 10

[transform_gamut]
tool:RemoveUtf8Marker       = 5
tool:StandardizeLineEnding  = 10
tool:AppendEndingNewLines   = 15
tool:Detab                  = 20
filter:HTML                 = 25
tool:StripSapcedLines       = 30

; These are first executed commands
[document_gamut]
filter:MetaData:strip         = 1
filter:FencedCodeBlock        = 5
filter:Note:strip             = 10
filter:LinkDefinition:strip   = 20
;debug=22
filter:Abbreviation:strip     = 25
block_gamut                   = 30
filter:MetaData:append        = 35
filter:Note:append            = 40

; These are all the transformations that occur *within* block-level
; tags like paragraphs headers and list items.
[span_gamut]
	; Process character escapes code spans and inline HTML in one shot.
filter:Span                  = -30
filter:Note                  = 5
	; Process anchor and image tags. Images must come first
	; because ![foo][f] looks like an anchor.
filter:Image                 = 10
filter:Anchor                = 20
	; Make links out of things like `<http://example.com/>`
	; Must come after doAnchors because you can use < and >
	; delimiters in inline links like [this](<url>).
filter:AutoLink              = 30
tool:EncodeAmpAndAngle       = 40
filter:Emphasis              = 50
filter:HardBreak             = 60
filter:Abbreviation          = 70

; Run block gamut tranformations, without hashing HTML blocks. This is 
; useful when HTML blocks are known to be already hashed, like in the first
; whole-document pass.
; These are all the transformations that form block-level
; tags like paragraphs headers and list items.
[block_gamut]
filter:FencedCodeBlock = 5
filter:Header          = 10
filter:Table           = 15
filter:HorizontalRule  = 20
filter:ListItem        = 40
filter:DefinitionList  = 45
filter:CodeBlock       = 50
filter:BlockQuote      = 60
tool:RebuildParagraph  = 100

; We need to escape raw HTML in Markdown source before doing anything 
; else. This need to be done for each block, and not only at the 
; begining in the Markdown function since hashed blocks can be part of
; list items and could have been indented. Indented blocks would have 
; been seen as a code block in a previous pass of hashHTMLBlocks.
[html_block_gamut]
filter:HTML            = 10
block_gamut            = 20

; Endfile